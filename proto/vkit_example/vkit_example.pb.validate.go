// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vkit_example/vkit_example.proto

package vkit_example

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := LoginReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UserValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := UserValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := UserValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserAddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAddReqMultiError, or
// nil if none found.
func (m *UserAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetItem() == nil {
		err := UserAddReqValidationError{
			field:  "Item",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAddReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAddReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAddReqValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserAddReqMultiError(errors)
	}

	return nil
}

// UserAddReqMultiError is an error wrapping multiple validation errors
// returned by UserAddReq.ValidateAll() if the designated constraints aren't met.
type UserAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddReqMultiError) AllErrors() []error { return m }

// UserAddReqValidationError is the validation error returned by
// UserAddReq.Validate if the designated constraints aren't met.
type UserAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddReqValidationError) ErrorName() string { return "UserAddReqValidationError" }

// Error satisfies the builtin error interface
func (e UserAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddReqValidationError{}

// Validate checks the field values on UserAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAddRespMultiError, or
// nil if none found.
func (m *UserAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return UserAddRespMultiError(errors)
	}

	return nil
}

// UserAddRespMultiError is an error wrapping multiple validation errors
// returned by UserAddResp.ValidateAll() if the designated constraints aren't met.
type UserAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddRespMultiError) AllErrors() []error { return m }

// UserAddRespValidationError is the validation error returned by
// UserAddResp.Validate if the designated constraints aren't met.
type UserAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddRespValidationError) ErrorName() string { return "UserAddRespValidationError" }

// Error satisfies the builtin error interface
func (e UserAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddRespValidationError{}

// Validate checks the field values on UserPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPageReqMultiError, or
// nil if none found.
func (m *UserPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if val := m.GetPageSize(); val < 1 || val > 10000 {
		err := UserPageReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 10000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsTotal

	// no validation rules for Name

	if len(errors) > 0 {
		return UserPageReqMultiError(errors)
	}

	return nil
}

// UserPageReqMultiError is an error wrapping multiple validation errors
// returned by UserPageReq.ValidateAll() if the designated constraints aren't met.
type UserPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPageReqMultiError) AllErrors() []error { return m }

// UserPageReqValidationError is the validation error returned by
// UserPageReq.Validate if the designated constraints aren't met.
type UserPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPageReqValidationError) ErrorName() string { return "UserPageReqValidationError" }

// Error satisfies the builtin error interface
func (e UserPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPageReqValidationError{}

// Validate checks the field values on UserPageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPageRespMultiError, or
// nil if none found.
func (m *UserPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserPageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserPageRespMultiError(errors)
	}

	return nil
}

// UserPageRespMultiError is an error wrapping multiple validation errors
// returned by UserPageResp.ValidateAll() if the designated constraints aren't met.
type UserPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPageRespMultiError) AllErrors() []error { return m }

// UserPageRespValidationError is the validation error returned by
// UserPageResp.Validate if the designated constraints aren't met.
type UserPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPageRespValidationError) ErrorName() string { return "UserPageRespValidationError" }

// Error satisfies the builtin error interface
func (e UserPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPageRespValidationError{}

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateReqMultiError, or
// nil if none found.
func (m *UserUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UserUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return UserUpdateReqMultiError(errors)
	}

	return nil
}

// UserUpdateReqMultiError is an error wrapping multiple validation errors
// returned by UserUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateReqMultiError) AllErrors() []error { return m }

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

// Validate checks the field values on UserUpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateRespMultiError,
// or nil if none found.
func (m *UserUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return UserUpdateRespMultiError(errors)
	}

	return nil
}

// UserUpdateRespMultiError is an error wrapping multiple validation errors
// returned by UserUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRespMultiError) AllErrors() []error { return m }

// UserUpdateRespValidationError is the validation error returned by
// UserUpdateResp.Validate if the designated constraints aren't met.
type UserUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRespValidationError) ErrorName() string { return "UserUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRespValidationError{}

// Validate checks the field values on UserDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDelReqMultiError, or
// nil if none found.
func (m *UserDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserDelReqMultiError(errors)
	}

	return nil
}

// UserDelReqMultiError is an error wrapping multiple validation errors
// returned by UserDelReq.ValidateAll() if the designated constraints aren't met.
type UserDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDelReqMultiError) AllErrors() []error { return m }

// UserDelReqValidationError is the validation error returned by
// UserDelReq.Validate if the designated constraints aren't met.
type UserDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDelReqValidationError) ErrorName() string { return "UserDelReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDelReqValidationError{}

// Validate checks the field values on UserDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDelRespMultiError, or
// nil if none found.
func (m *UserDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return UserDelRespMultiError(errors)
	}

	return nil
}

// UserDelRespMultiError is an error wrapping multiple validation errors
// returned by UserDelResp.ValidateAll() if the designated constraints aren't met.
type UserDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDelRespMultiError) AllErrors() []error { return m }

// UserDelRespValidationError is the validation error returned by
// UserDelResp.Validate if the designated constraints aren't met.
type UserDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDelRespValidationError) ErrorName() string { return "UserDelRespValidationError" }

// Error satisfies the builtin error interface
func (e UserDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDelRespValidationError{}

// Validate checks the field values on UserGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetReqMultiError, or
// nil if none found.
func (m *UserGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserGetReqMultiError(errors)
	}

	return nil
}

// UserGetReqMultiError is an error wrapping multiple validation errors
// returned by UserGetReq.ValidateAll() if the designated constraints aren't met.
type UserGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetReqMultiError) AllErrors() []error { return m }

// UserGetReqValidationError is the validation error returned by
// UserGetReq.Validate if the designated constraints aren't met.
type UserGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetReqValidationError) ErrorName() string { return "UserGetReqValidationError" }

// Error satisfies the builtin error interface
func (e UserGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetReqValidationError{}

// Validate checks the field values on UserGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetRespMultiError, or
// nil if none found.
func (m *UserGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetRespMultiError(errors)
	}

	return nil
}

// UserGetRespMultiError is an error wrapping multiple validation errors
// returned by UserGetResp.ValidateAll() if the designated constraints aren't met.
type UserGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetRespMultiError) AllErrors() []error { return m }

// UserGetRespValidationError is the validation error returned by
// UserGetResp.Validate if the designated constraints aren't met.
type UserGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetRespValidationError) ErrorName() string { return "UserGetRespValidationError" }

// Error satisfies the builtin error interface
func (e UserGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetRespValidationError{}

// Code generated by protoc-gen-vkit. DO NOT EDIT.
// versions:
// - protoc-gen-vkit v1.0.0
// - protoc             v3.21.1
// source: vkit_example/vkit_example.proto

package vkit_example

import (
	context "context"
	grpcx "github.com/visonlv/go-vkit/grpcx"
	grpc "google.golang.org/grpc"
)

var _ = new(context.Context)
var _ = new(grpc.CallOption)
var _ = new(grpcx.Client)

type AuthServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *AuthServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, c.name, "AuthService.Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *AuthServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, c.name, "AuthService.Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewAuthServiceClient(name string, cc grpcx.Client) *AuthServiceClient {
	return &AuthServiceClient{name, cc}
}

type UserServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *UserServiceClient) Add(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error) {
	out := new(UserAddResp)
	err := c.cc.Invoke(ctx, c.name, "UserService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *UserServiceClient) Update(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	out := new(UserUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "UserService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *UserServiceClient) Page(ctx context.Context, in *UserPageReq, opts ...grpc.CallOption) (*UserPageResp, error) {
	out := new(UserPageResp)
	err := c.cc.Invoke(ctx, c.name, "UserService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *UserServiceClient) Del(ctx context.Context, in *UserDelReq, opts ...grpc.CallOption) (*UserDelResp, error) {
	out := new(UserDelResp)
	err := c.cc.Invoke(ctx, c.name, "UserService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *UserServiceClient) Get(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetResp, error) {
	out := new(UserGetResp)
	err := c.cc.Invoke(ctx, c.name, "UserService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewUserServiceClient(name string, cc grpcx.Client) *UserServiceClient {
	return &UserServiceClient{name, cc}
}

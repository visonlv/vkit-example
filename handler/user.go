// Code generated by protoc-gen-infore.
// versions:
// - protoc-gen-infore v1.0.0

package handler

import (
	context "context"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/vkit-example/handler/auth"
	"github.com/visonlv/vkit-example/model"
	pb "github.com/visonlv/vkit-example/proto/vkit_example"
	"github.com/visonlv/vkit-example/utils"
)

type UserService struct {
}

func (the *UserService) Add(ctx context.Context, req *pb.UserAddReq, resp *pb.UserAddResp) error {
	// 检测邮箱
	b, err := model.UserEmailExists(nil, req.Item.Email)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if b {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "邮箱已经注册"
		return nil
	}

	userId := utils.GetUserIdFromContext(ctx)
	if userId == "" {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "获取token中的用户Id失败"
		return nil
	}

	newM := &model.UserModel{}
	utilsx.DeepCopy(req.Item, newM)
	newM.CreateUser = userId
	err = model.UserAdd(nil, newM)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("用户添加失败:%s", err.Error())
		return nil
	}
	resp.Id = newM.Id
	return nil
}

func (the *UserService) Update(ctx context.Context, req *pb.UserUpdateReq, resp *pb.UserUpdateResp) error {
	userId := utils.GetUserIdFromContext(ctx)
	item, err := model.UserGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	item.Password = req.NewPassword
	item.Name = req.Name
	item.UpdateUser = userId
	_, err = model.UserUpdate(nil, item)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("用户更新失败:%s", err.Error())
		return nil
	}
	resp.Id = item.Id
	return nil
}

func (the *UserService) Page(ctx context.Context, req *pb.UserPageReq, resp *pb.UserPageResp) error {
	list, totol, err := model.UserPage(nil, "", req.Name, req.PageIndex, req.PageSize)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	listRet := make([]*pb.User, 0, len(list))
	for _, v := range list {
		itemRet := &pb.User{}
		utilsx.DeepCopy(v, itemRet)
		listRet = append(listRet, itemRet)
	}
	resp.Total = totol
	resp.List = listRet
	return nil
}

func (the *UserService) Del(ctx context.Context, req *pb.UserDelReq, resp *pb.UserDelResp) error {
	_, err := model.UserGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	if req.Id == utils.GetUserIdFromContext(ctx) {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "不可以删除自己"
		return nil
	}

	err = model.UserDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除用户失败:%s", err.Error())
		return nil
	}

	// 删除token
	auth.DeleteToken(req.Id)
	resp.Id = req.Id
	return nil
}

func (the *UserService) Get(ctx context.Context, req *pb.UserGetReq, resp *pb.UserGetResp) error {
	m, err := model.UserGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除用户失败:%s", err.Error())
		return nil
	}

	itemRet := &pb.User{}
	utilsx.DeepCopy(m, itemRet)
	resp.Item = itemRet
	return nil
}
